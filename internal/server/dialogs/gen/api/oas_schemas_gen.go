// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *R5xxStatusCodeWithHeaders) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/DialogMessage
type DialogMessage struct {
	From UserId            `json:"from"`
	To   UserId            `json:"to"`
	Text DialogMessageText `json:"text"`
}

// GetFrom returns the value of From.
func (s *DialogMessage) GetFrom() UserId {
	return s.From
}

// GetTo returns the value of To.
func (s *DialogMessage) GetTo() UserId {
	return s.To
}

// GetText returns the value of Text.
func (s *DialogMessage) GetText() DialogMessageText {
	return s.Text
}

// SetFrom sets the value of From.
func (s *DialogMessage) SetFrom(val UserId) {
	s.From = val
}

// SetTo sets the value of To.
func (s *DialogMessage) SetTo(val UserId) {
	s.To = val
}

// SetText sets the value of Text.
func (s *DialogMessage) SetText(val DialogMessageText) {
	s.Text = val
}

type DialogMessageText string

type DialogUserIDListGetOKApplicationJSON []DialogMessage

func (*DialogUserIDListGetOKApplicationJSON) dialogUserIDListGetRes() {}

// DialogUserIDSendPostOK is response for DialogUserIDSendPost operation.
type DialogUserIDSendPostOK struct{}

func (*DialogUserIDSendPostOK) dialogUserIDSendPostRes() {}

type DialogUserIDSendPostReq struct {
	Text DialogMessageText `json:"text"`
}

// GetText returns the value of Text.
func (s *DialogUserIDSendPostReq) GetText() DialogMessageText {
	return s.Text
}

// SetText sets the value of Text.
func (s *DialogUserIDSendPostReq) SetText(val DialogMessageText) {
	s.Text = val
}

// NewOptDialogUserIDSendPostReq returns new OptDialogUserIDSendPostReq with value set to v.
func NewOptDialogUserIDSendPostReq(v DialogUserIDSendPostReq) OptDialogUserIDSendPostReq {
	return OptDialogUserIDSendPostReq{
		Value: v,
		Set:   true,
	}
}

// OptDialogUserIDSendPostReq is optional DialogUserIDSendPostReq.
type OptDialogUserIDSendPostReq struct {
	Value DialogUserIDSendPostReq
	Set   bool
}

// IsSet returns true if OptDialogUserIDSendPostReq was set.
func (o OptDialogUserIDSendPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDialogUserIDSendPostReq) Reset() {
	var v DialogUserIDSendPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDialogUserIDSendPostReq) SetTo(v DialogUserIDSendPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDialogUserIDSendPostReq) Get() (v DialogUserIDSendPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDialogUserIDSendPostReq) Or(d DialogUserIDSendPostReq) DialogUserIDSendPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/responses/401
type R401 struct{}

func (*R401) dialogUserIDListGetRes()  {}
func (*R401) dialogUserIDSendPostRes() {}

type R5xx struct {
	// Описание ошибки.
	Message string `json:"message"`
	// Идентификатор запроса. Предназначен для более
	// быстрого поиска проблем.
	RequestID OptString `json:"request_id"`
	// Код ошибки. Предназначен для классификации проблем и
	// более быстрого решения проблем.
	Code OptInt `json:"code"`
}

// GetMessage returns the value of Message.
func (s *R5xx) GetMessage() string {
	return s.Message
}

// GetRequestID returns the value of RequestID.
func (s *R5xx) GetRequestID() OptString {
	return s.RequestID
}

// GetCode returns the value of Code.
func (s *R5xx) GetCode() OptInt {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *R5xx) SetMessage(val string) {
	s.Message = val
}

// SetRequestID sets the value of RequestID.
func (s *R5xx) SetRequestID(val OptString) {
	s.RequestID = val
}

// SetCode sets the value of Code.
func (s *R5xx) SetCode(val OptInt) {
	s.Code = val
}

// R5xxStatusCodeWithHeaders wraps R5xx with status code and response headers.
type R5xxStatusCodeWithHeaders struct {
	StatusCode int
	RetryAfter OptInt
	Response   R5xx
}

// GetStatusCode returns the value of StatusCode.
func (s *R5xxStatusCodeWithHeaders) GetStatusCode() int {
	return s.StatusCode
}

// GetRetryAfter returns the value of RetryAfter.
func (s *R5xxStatusCodeWithHeaders) GetRetryAfter() OptInt {
	return s.RetryAfter
}

// GetResponse returns the value of Response.
func (s *R5xxStatusCodeWithHeaders) GetResponse() R5xx {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *R5xxStatusCodeWithHeaders) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetRetryAfter sets the value of RetryAfter.
func (s *R5xxStatusCodeWithHeaders) SetRetryAfter(val OptInt) {
	s.RetryAfter = val
}

// SetResponse sets the value of Response.
func (s *R5xxStatusCodeWithHeaders) SetResponse(val R5xx) {
	s.Response = val
}

type UserId string
